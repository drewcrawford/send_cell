pub mod send_cells
pub mod send_cells::send_cell
pub struct send_cells::send_cell::SendCell<T>
impl<T: core::future::future::Future> send_cells::send_cell::SendCell<T>
pub fn send_cells::send_cell::SendCell<T>::into_future(self) -> send_cells::send_cell::SendFuture<T>
impl<T> send_cells::send_cell::SendCell<T>
pub fn send_cells::send_cell::SendCell<T>::copying(&self) -> Self where T: core::marker::Copy
pub fn send_cells::send_cell::SendCell<T>::get(&self) -> &T
pub fn send_cells::send_cell::SendCell<T>::get_mut(&mut self) -> &mut T
pub unsafe fn send_cells::send_cell::SendCell<T>::get_unchecked(&self) -> &T
pub unsafe fn send_cells::send_cell::SendCell<T>::get_unchecked_mut(&mut self) -> &mut T
pub fn send_cells::send_cell::SendCell<T>::into_inner(self) -> T
pub unsafe fn send_cells::send_cell::SendCell<T>::into_unchecked_inner(self) -> T
pub fn send_cells::send_cell::SendCell<T>::new(t: T) -> send_cells::send_cell::SendCell<T>
pub unsafe fn send_cells::send_cell::SendCell<T>::preserving_cell_thread<U>(&self, new: U) -> send_cells::send_cell::SendCell<U>
impl<T: core::default::Default> core::default::Default for send_cells::send_cell::SendCell<T>
pub fn send_cells::send_cell::SendCell<T>::default() -> send_cells::send_cell::SendCell<T>
impl<T: core::fmt::Debug> core::fmt::Debug for send_cells::send_cell::SendCell<T>
pub fn send_cells::send_cell::SendCell<T>::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl<T> core::convert::AsMut<T> for send_cells::send_cell::SendCell<T>
pub fn send_cells::send_cell::SendCell<T>::as_mut(&mut self) -> &mut T
impl<T> core::convert::AsRef<T> for send_cells::send_cell::SendCell<T>
pub fn send_cells::send_cell::SendCell<T>::as_ref(&self) -> &T
impl<T> core::convert::From<T> for send_cells::send_cell::SendCell<T>
pub fn send_cells::send_cell::SendCell<T>::from(value: T) -> Self
impl<T> core::ops::deref::Deref for send_cells::send_cell::SendCell<T>
pub type send_cells::send_cell::SendCell<T>::Target = T
pub fn send_cells::send_cell::SendCell<T>::deref(&self) -> &Self::Target
impl<T> core::ops::deref::DerefMut for send_cells::send_cell::SendCell<T>
pub fn send_cells::send_cell::SendCell<T>::deref_mut(&mut self) -> &mut Self::Target
impl<T> core::ops::drop::Drop for send_cells::send_cell::SendCell<T>
pub fn send_cells::send_cell::SendCell<T>::drop(&mut self)
impl<T> core::marker::Freeze for send_cells::send_cell::SendCell<T> where T: core::marker::Freeze
impl<T> core::marker::Send for send_cells::send_cell::SendCell<T>
impl<T> core::marker::Sync for send_cells::send_cell::SendCell<T> where T: core::marker::Sync
impl<T> core::marker::Unpin for send_cells::send_cell::SendCell<T> where T: core::marker::Unpin
impl<T> core::panic::unwind_safe::RefUnwindSafe for send_cells::send_cell::SendCell<T> where T: core::panic::unwind_safe::RefUnwindSafe
impl<T> core::panic::unwind_safe::UnwindSafe for send_cells::send_cell::SendCell<T> where T: core::panic::unwind_safe::UnwindSafe
impl<P, T> core::ops::deref::Receiver for send_cells::send_cell::SendCell<T> where P: core::ops::deref::Deref<Target = T> + ?core::marker::Sized, T: ?core::marker::Sized
pub type send_cells::send_cell::SendCell<T>::Target = T
impl<T, U> core::convert::Into<U> for send_cells::send_cell::SendCell<T> where U: core::convert::From<T>
pub fn send_cells::send_cell::SendCell<T>::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for send_cells::send_cell::SendCell<T> where U: core::convert::Into<T>
pub type send_cells::send_cell::SendCell<T>::Error = core::convert::Infallible
pub fn send_cells::send_cell::SendCell<T>::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for send_cells::send_cell::SendCell<T> where U: core::convert::TryFrom<T>
pub type send_cells::send_cell::SendCell<T>::Error = <U as core::convert::TryFrom<T>>::Error
pub fn send_cells::send_cell::SendCell<T>::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for send_cells::send_cell::SendCell<T> where T: 'static + ?core::marker::Sized
pub fn send_cells::send_cell::SendCell<T>::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for send_cells::send_cell::SendCell<T> where T: ?core::marker::Sized
pub fn send_cells::send_cell::SendCell<T>::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for send_cells::send_cell::SendCell<T> where T: ?core::marker::Sized
pub fn send_cells::send_cell::SendCell<T>::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for send_cells::send_cell::SendCell<T>
pub fn send_cells::send_cell::SendCell<T>::from(t: T) -> T
impl<T> core::convert::From<never> for send_cells::send_cell::SendCell<T>
pub fn send_cells::send_cell::SendCell<T>::from(t: never) -> T
pub struct send_cells::send_cell::SendFuture<T>
impl<T: core::fmt::Debug> core::fmt::Debug for send_cells::send_cell::SendFuture<T>
pub fn send_cells::send_cell::SendFuture<T>::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl<T: core::future::future::Future> core::future::future::Future for send_cells::send_cell::SendFuture<T>
pub type send_cells::send_cell::SendFuture<T>::Output = <T as core::future::future::Future>::Output
pub fn send_cells::send_cell::SendFuture<T>::poll(self: core::pin::Pin<&mut Self>, cx: &mut core::task::wake::Context<'_>) -> core::task::poll::Poll<Self::Output>
impl<T> core::marker::Send for send_cells::send_cell::SendFuture<T>
impl<T> core::marker::Freeze for send_cells::send_cell::SendFuture<T> where T: core::marker::Freeze
impl<T> core::marker::Sync for send_cells::send_cell::SendFuture<T> where T: core::marker::Sync
impl<T> core::marker::Unpin for send_cells::send_cell::SendFuture<T> where T: core::marker::Unpin
impl<T> core::panic::unwind_safe::RefUnwindSafe for send_cells::send_cell::SendFuture<T> where T: core::panic::unwind_safe::RefUnwindSafe
impl<T> core::panic::unwind_safe::UnwindSafe for send_cells::send_cell::SendFuture<T> where T: core::panic::unwind_safe::UnwindSafe
impl<F> core::future::into_future::IntoFuture for send_cells::send_cell::SendFuture<T> where F: core::future::future::Future
pub type send_cells::send_cell::SendFuture<T>::IntoFuture = F
pub type send_cells::send_cell::SendFuture<T>::Output = <F as core::future::future::Future>::Output
pub fn send_cells::send_cell::SendFuture<T>::into_future(self) -> <F as core::future::into_future::IntoFuture>::IntoFuture
impl<T, U> core::convert::Into<U> for send_cells::send_cell::SendFuture<T> where U: core::convert::From<T>
pub fn send_cells::send_cell::SendFuture<T>::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for send_cells::send_cell::SendFuture<T> where U: core::convert::Into<T>
pub type send_cells::send_cell::SendFuture<T>::Error = core::convert::Infallible
pub fn send_cells::send_cell::SendFuture<T>::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for send_cells::send_cell::SendFuture<T> where U: core::convert::TryFrom<T>
pub type send_cells::send_cell::SendFuture<T>::Error = <U as core::convert::TryFrom<T>>::Error
pub fn send_cells::send_cell::SendFuture<T>::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for send_cells::send_cell::SendFuture<T> where T: 'static + ?core::marker::Sized
pub fn send_cells::send_cell::SendFuture<T>::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for send_cells::send_cell::SendFuture<T> where T: ?core::marker::Sized
pub fn send_cells::send_cell::SendFuture<T>::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for send_cells::send_cell::SendFuture<T> where T: ?core::marker::Sized
pub fn send_cells::send_cell::SendFuture<T>::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for send_cells::send_cell::SendFuture<T>
pub fn send_cells::send_cell::SendFuture<T>::from(t: T) -> T
pub mod send_cells::sync_cell
pub struct send_cells::sync_cell::SyncCell<T>
impl<T> send_cells::sync_cell::SyncCell<T>
pub fn send_cells::sync_cell::SyncCell<T>::into_inner(self) -> T
pub fn send_cells::sync_cell::SyncCell<T>::new(value: T) -> send_cells::sync_cell::SyncCell<T>
pub fn send_cells::sync_cell::SyncCell<T>::with<R>(&self, f: impl core::ops::function::FnOnce(&T) -> R) -> R
pub fn send_cells::sync_cell::SyncCell<T>::with_mut<R>(&self, f: impl core::ops::function::FnOnce(&mut T) -> R) -> R
pub unsafe fn send_cells::sync_cell::SyncCell<T>::with_mut_unchecked(&self) -> &mut T
pub unsafe fn send_cells::sync_cell::SyncCell<T>::with_unchecked(&self) -> &T
impl<T: core::clone::Clone> core::clone::Clone for send_cells::sync_cell::SyncCell<T>
pub fn send_cells::sync_cell::SyncCell<T>::clone(&self) -> Self
impl<T: core::cmp::Eq> core::cmp::Eq for send_cells::sync_cell::SyncCell<T>
impl<T: core::cmp::Ord> core::cmp::Ord for send_cells::sync_cell::SyncCell<T>
pub fn send_cells::sync_cell::SyncCell<T>::cmp(&self, other: &Self) -> core::cmp::Ordering
impl<T: core::cmp::PartialEq> core::cmp::PartialEq for send_cells::sync_cell::SyncCell<T>
pub fn send_cells::sync_cell::SyncCell<T>::eq(&self, other: &Self) -> bool
impl<T: core::cmp::PartialOrd> core::cmp::PartialOrd for send_cells::sync_cell::SyncCell<T>
pub fn send_cells::sync_cell::SyncCell<T>::partial_cmp(&self, other: &Self) -> core::option::Option<core::cmp::Ordering>
impl<T: core::default::Default> core::default::Default for send_cells::sync_cell::SyncCell<T>
pub fn send_cells::sync_cell::SyncCell<T>::default() -> send_cells::sync_cell::SyncCell<T>
impl<T: core::fmt::Debug> core::fmt::Debug for send_cells::sync_cell::SyncCell<T>
pub fn send_cells::sync_cell::SyncCell<T>::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl<T: core::hash::Hash> core::hash::Hash for send_cells::sync_cell::SyncCell<T>
pub fn send_cells::sync_cell::SyncCell<T>::hash<H: core::hash::Hasher>(&self, state: &mut H)
impl<T: core::marker::Send> core::marker::Send for send_cells::sync_cell::SyncCell<T>
impl<T: core::marker::Send> core::marker::Sync for send_cells::sync_cell::SyncCell<T>
impl<T> core::convert::From<T> for send_cells::sync_cell::SyncCell<T>
pub fn send_cells::sync_cell::SyncCell<T>::from(value: T) -> Self
impl<T> !core::marker::Freeze for send_cells::sync_cell::SyncCell<T>
impl<T> core::marker::Unpin for send_cells::sync_cell::SyncCell<T> where T: core::marker::Unpin
impl<T> !core::panic::unwind_safe::RefUnwindSafe for send_cells::sync_cell::SyncCell<T>
impl<T> core::panic::unwind_safe::UnwindSafe for send_cells::sync_cell::SyncCell<T> where T: core::panic::unwind_safe::UnwindSafe
impl<T, U> core::convert::Into<U> for send_cells::sync_cell::SyncCell<T> where U: core::convert::From<T>
pub fn send_cells::sync_cell::SyncCell<T>::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for send_cells::sync_cell::SyncCell<T> where U: core::convert::Into<T>
pub type send_cells::sync_cell::SyncCell<T>::Error = core::convert::Infallible
pub fn send_cells::sync_cell::SyncCell<T>::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for send_cells::sync_cell::SyncCell<T> where U: core::convert::TryFrom<T>
pub type send_cells::sync_cell::SyncCell<T>::Error = <U as core::convert::TryFrom<T>>::Error
pub fn send_cells::sync_cell::SyncCell<T>::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for send_cells::sync_cell::SyncCell<T> where T: core::clone::Clone
pub type send_cells::sync_cell::SyncCell<T>::Owned = T
pub fn send_cells::sync_cell::SyncCell<T>::clone_into(&self, target: &mut T)
pub fn send_cells::sync_cell::SyncCell<T>::to_owned(&self) -> T
impl<T> core::any::Any for send_cells::sync_cell::SyncCell<T> where T: 'static + ?core::marker::Sized
pub fn send_cells::sync_cell::SyncCell<T>::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for send_cells::sync_cell::SyncCell<T> where T: ?core::marker::Sized
pub fn send_cells::sync_cell::SyncCell<T>::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for send_cells::sync_cell::SyncCell<T> where T: ?core::marker::Sized
pub fn send_cells::sync_cell::SyncCell<T>::borrow_mut(&mut self) -> &mut T
impl<T> core::clone::CloneToUninit for send_cells::sync_cell::SyncCell<T> where T: core::clone::Clone
pub unsafe fn send_cells::sync_cell::SyncCell<T>::clone_to_uninit(&self, dest: *mut u8)
impl<T> core::convert::From<T> for send_cells::sync_cell::SyncCell<T>
pub fn send_cells::sync_cell::SyncCell<T>::from(t: T) -> T
impl<T> core::convert::From<never> for send_cells::sync_cell::SyncCell<T>
pub fn send_cells::sync_cell::SyncCell<T>::from(t: never) -> T
pub mod send_cells::unsafe_send_cell
pub struct send_cells::unsafe_send_cell::UnsafeSendCell<T>(_)
impl<T: core::future::future::Future> send_cells::unsafe_send_cell::UnsafeSendCell<T>
pub unsafe fn send_cells::unsafe_send_cell::UnsafeSendCell<T>::into_future(self) -> send_cells::unsafe_send_cell::UnsafeSendFuture<T>
impl<T> send_cells::unsafe_send_cell::UnsafeSendCell<T>
pub unsafe fn send_cells::unsafe_send_cell::UnsafeSendCell<T>::get(&self) -> &T
pub unsafe fn send_cells::unsafe_send_cell::UnsafeSendCell<T>::get_mut(&mut self) -> &mut T
pub unsafe fn send_cells::unsafe_send_cell::UnsafeSendCell<T>::into_inner(self) -> T
pub fn send_cells::unsafe_send_cell::UnsafeSendCell<T>::new(value: T) -> Self
pub unsafe fn send_cells::unsafe_send_cell::UnsafeSendCell<T>::new_unchecked(value: T) -> Self
impl<T: core::default::Default> core::default::Default for send_cells::unsafe_send_cell::UnsafeSendCell<T>
pub fn send_cells::unsafe_send_cell::UnsafeSendCell<T>::default() -> Self
impl<T> core::convert::From<T> for send_cells::unsafe_send_cell::UnsafeSendCell<T>
pub fn send_cells::unsafe_send_cell::UnsafeSendCell<T>::from(value: T) -> Self
impl<T> core::fmt::Debug for send_cells::unsafe_send_cell::UnsafeSendCell<T>
pub fn send_cells::unsafe_send_cell::UnsafeSendCell<T>::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl<T> core::marker::Send for send_cells::unsafe_send_cell::UnsafeSendCell<T>
impl<T> core::marker::Freeze for send_cells::unsafe_send_cell::UnsafeSendCell<T> where T: core::marker::Freeze
impl<T> core::marker::Sync for send_cells::unsafe_send_cell::UnsafeSendCell<T> where T: core::marker::Sync
impl<T> core::marker::Unpin for send_cells::unsafe_send_cell::UnsafeSendCell<T> where T: core::marker::Unpin
impl<T> core::panic::unwind_safe::RefUnwindSafe for send_cells::unsafe_send_cell::UnsafeSendCell<T> where T: core::panic::unwind_safe::RefUnwindSafe
impl<T> core::panic::unwind_safe::UnwindSafe for send_cells::unsafe_send_cell::UnsafeSendCell<T> where T: core::panic::unwind_safe::UnwindSafe
impl<T, U> core::convert::Into<U> for send_cells::unsafe_send_cell::UnsafeSendCell<T> where U: core::convert::From<T>
pub fn send_cells::unsafe_send_cell::UnsafeSendCell<T>::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for send_cells::unsafe_send_cell::UnsafeSendCell<T> where U: core::convert::Into<T>
pub type send_cells::unsafe_send_cell::UnsafeSendCell<T>::Error = core::convert::Infallible
pub fn send_cells::unsafe_send_cell::UnsafeSendCell<T>::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for send_cells::unsafe_send_cell::UnsafeSendCell<T> where U: core::convert::TryFrom<T>
pub type send_cells::unsafe_send_cell::UnsafeSendCell<T>::Error = <U as core::convert::TryFrom<T>>::Error
pub fn send_cells::unsafe_send_cell::UnsafeSendCell<T>::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for send_cells::unsafe_send_cell::UnsafeSendCell<T> where T: 'static + ?core::marker::Sized
pub fn send_cells::unsafe_send_cell::UnsafeSendCell<T>::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for send_cells::unsafe_send_cell::UnsafeSendCell<T> where T: ?core::marker::Sized
pub fn send_cells::unsafe_send_cell::UnsafeSendCell<T>::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for send_cells::unsafe_send_cell::UnsafeSendCell<T> where T: ?core::marker::Sized
pub fn send_cells::unsafe_send_cell::UnsafeSendCell<T>::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for send_cells::unsafe_send_cell::UnsafeSendCell<T>
pub fn send_cells::unsafe_send_cell::UnsafeSendCell<T>::from(t: T) -> T
impl<T> core::convert::From<never> for send_cells::unsafe_send_cell::UnsafeSendCell<T>
pub fn send_cells::unsafe_send_cell::UnsafeSendCell<T>::from(t: never) -> T
pub struct send_cells::unsafe_send_cell::UnsafeSendFuture<T>(_)
impl<T: core::fmt::Debug> core::fmt::Debug for send_cells::unsafe_send_cell::UnsafeSendFuture<T>
pub fn send_cells::unsafe_send_cell::UnsafeSendFuture<T>::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl<T: core::future::future::Future> core::future::future::Future for send_cells::unsafe_send_cell::UnsafeSendFuture<T>
pub type send_cells::unsafe_send_cell::UnsafeSendFuture<T>::Output = <T as core::future::future::Future>::Output
pub fn send_cells::unsafe_send_cell::UnsafeSendFuture<T>::poll(self: core::pin::Pin<&mut Self>, cx: &mut core::task::wake::Context<'_>) -> core::task::poll::Poll<Self::Output>
impl<T> core::marker::Send for send_cells::unsafe_send_cell::UnsafeSendFuture<T>
impl<T> core::marker::Freeze for send_cells::unsafe_send_cell::UnsafeSendFuture<T> where T: core::marker::Freeze
impl<T> core::marker::Sync for send_cells::unsafe_send_cell::UnsafeSendFuture<T> where T: core::marker::Sync
impl<T> core::marker::Unpin for send_cells::unsafe_send_cell::UnsafeSendFuture<T> where T: core::marker::Unpin
impl<T> core::panic::unwind_safe::RefUnwindSafe for send_cells::unsafe_send_cell::UnsafeSendFuture<T> where T: core::panic::unwind_safe::RefUnwindSafe
impl<T> core::panic::unwind_safe::UnwindSafe for send_cells::unsafe_send_cell::UnsafeSendFuture<T> where T: core::panic::unwind_safe::UnwindSafe
impl<F> core::future::into_future::IntoFuture for send_cells::unsafe_send_cell::UnsafeSendFuture<T> where F: core::future::future::Future
pub type send_cells::unsafe_send_cell::UnsafeSendFuture<T>::IntoFuture = F
pub type send_cells::unsafe_send_cell::UnsafeSendFuture<T>::Output = <F as core::future::future::Future>::Output
pub fn send_cells::unsafe_send_cell::UnsafeSendFuture<T>::into_future(self) -> <F as core::future::into_future::IntoFuture>::IntoFuture
impl<T, U> core::convert::Into<U> for send_cells::unsafe_send_cell::UnsafeSendFuture<T> where U: core::convert::From<T>
pub fn send_cells::unsafe_send_cell::UnsafeSendFuture<T>::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for send_cells::unsafe_send_cell::UnsafeSendFuture<T> where U: core::convert::Into<T>
pub type send_cells::unsafe_send_cell::UnsafeSendFuture<T>::Error = core::convert::Infallible
pub fn send_cells::unsafe_send_cell::UnsafeSendFuture<T>::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for send_cells::unsafe_send_cell::UnsafeSendFuture<T> where U: core::convert::TryFrom<T>
pub type send_cells::unsafe_send_cell::UnsafeSendFuture<T>::Error = <U as core::convert::TryFrom<T>>::Error
pub fn send_cells::unsafe_send_cell::UnsafeSendFuture<T>::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for send_cells::unsafe_send_cell::UnsafeSendFuture<T> where T: 'static + ?core::marker::Sized
pub fn send_cells::unsafe_send_cell::UnsafeSendFuture<T>::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for send_cells::unsafe_send_cell::UnsafeSendFuture<T> where T: ?core::marker::Sized
pub fn send_cells::unsafe_send_cell::UnsafeSendFuture<T>::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for send_cells::unsafe_send_cell::UnsafeSendFuture<T> where T: ?core::marker::Sized
pub fn send_cells::unsafe_send_cell::UnsafeSendFuture<T>::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for send_cells::unsafe_send_cell::UnsafeSendFuture<T>
pub fn send_cells::unsafe_send_cell::UnsafeSendFuture<T>::from(t: T) -> T
pub mod send_cells::unsafe_sync_cell
pub struct send_cells::unsafe_sync_cell::UnsafeSyncCell<T>(_)
impl<T: core::default::Default> send_cells::unsafe_sync_cell::UnsafeSyncCell<T>
pub fn send_cells::unsafe_sync_cell::UnsafeSyncCell<T>::default() -> Self
impl<T> send_cells::unsafe_sync_cell::UnsafeSyncCell<T>
pub unsafe fn send_cells::unsafe_sync_cell::UnsafeSyncCell<T>::get(&self) -> &T
pub fn send_cells::unsafe_sync_cell::UnsafeSyncCell<T>::get_mut(&mut self) -> &mut T
pub unsafe fn send_cells::unsafe_sync_cell::UnsafeSyncCell<T>::get_mut_unchecked(&self) -> &mut T
pub fn send_cells::unsafe_sync_cell::UnsafeSyncCell<T>::into_inner(self) -> T
pub fn send_cells::unsafe_sync_cell::UnsafeSyncCell<T>::new(value: T) -> Self
impl<T> core::convert::AsMut<T> for send_cells::unsafe_sync_cell::UnsafeSyncCell<T>
pub fn send_cells::unsafe_sync_cell::UnsafeSyncCell<T>::as_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for send_cells::unsafe_sync_cell::UnsafeSyncCell<T>
pub fn send_cells::unsafe_sync_cell::UnsafeSyncCell<T>::from(value: T) -> Self
impl<T> core::fmt::Debug for send_cells::unsafe_sync_cell::UnsafeSyncCell<T>
pub fn send_cells::unsafe_sync_cell::UnsafeSyncCell<T>::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl<T> core::marker::Sync for send_cells::unsafe_sync_cell::UnsafeSyncCell<T>
impl<T> !core::marker::Freeze for send_cells::unsafe_sync_cell::UnsafeSyncCell<T>
impl<T> core::marker::Send for send_cells::unsafe_sync_cell::UnsafeSyncCell<T> where T: core::marker::Send
impl<T> core::marker::Unpin for send_cells::unsafe_sync_cell::UnsafeSyncCell<T> where T: core::marker::Unpin
impl<T> !core::panic::unwind_safe::RefUnwindSafe for send_cells::unsafe_sync_cell::UnsafeSyncCell<T>
impl<T> core::panic::unwind_safe::UnwindSafe for send_cells::unsafe_sync_cell::UnsafeSyncCell<T> where T: core::panic::unwind_safe::UnwindSafe
impl<T, U> core::convert::Into<U> for send_cells::unsafe_sync_cell::UnsafeSyncCell<T> where U: core::convert::From<T>
pub fn send_cells::unsafe_sync_cell::UnsafeSyncCell<T>::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for send_cells::unsafe_sync_cell::UnsafeSyncCell<T> where U: core::convert::Into<T>
pub type send_cells::unsafe_sync_cell::UnsafeSyncCell<T>::Error = core::convert::Infallible
pub fn send_cells::unsafe_sync_cell::UnsafeSyncCell<T>::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for send_cells::unsafe_sync_cell::UnsafeSyncCell<T> where U: core::convert::TryFrom<T>
pub type send_cells::unsafe_sync_cell::UnsafeSyncCell<T>::Error = <U as core::convert::TryFrom<T>>::Error
pub fn send_cells::unsafe_sync_cell::UnsafeSyncCell<T>::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for send_cells::unsafe_sync_cell::UnsafeSyncCell<T> where T: 'static + ?core::marker::Sized
pub fn send_cells::unsafe_sync_cell::UnsafeSyncCell<T>::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for send_cells::unsafe_sync_cell::UnsafeSyncCell<T> where T: ?core::marker::Sized
pub fn send_cells::unsafe_sync_cell::UnsafeSyncCell<T>::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for send_cells::unsafe_sync_cell::UnsafeSyncCell<T> where T: ?core::marker::Sized
pub fn send_cells::unsafe_sync_cell::UnsafeSyncCell<T>::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for send_cells::unsafe_sync_cell::UnsafeSyncCell<T>
pub fn send_cells::unsafe_sync_cell::UnsafeSyncCell<T>::from(t: T) -> T
impl<T> core::convert::From<never> for send_cells::unsafe_sync_cell::UnsafeSyncCell<T>
pub fn send_cells::unsafe_sync_cell::UnsafeSyncCell<T>::from(t: never) -> T
pub struct send_cells::SendCell<T>
impl<T: core::future::future::Future> send_cells::send_cell::SendCell<T>
pub fn send_cells::send_cell::SendCell<T>::into_future(self) -> send_cells::send_cell::SendFuture<T>
impl<T> send_cells::send_cell::SendCell<T>
pub fn send_cells::send_cell::SendCell<T>::copying(&self) -> Self where T: core::marker::Copy
pub fn send_cells::send_cell::SendCell<T>::get(&self) -> &T
pub fn send_cells::send_cell::SendCell<T>::get_mut(&mut self) -> &mut T
pub unsafe fn send_cells::send_cell::SendCell<T>::get_unchecked(&self) -> &T
pub unsafe fn send_cells::send_cell::SendCell<T>::get_unchecked_mut(&mut self) -> &mut T
pub fn send_cells::send_cell::SendCell<T>::into_inner(self) -> T
pub unsafe fn send_cells::send_cell::SendCell<T>::into_unchecked_inner(self) -> T
pub fn send_cells::send_cell::SendCell<T>::new(t: T) -> send_cells::send_cell::SendCell<T>
pub unsafe fn send_cells::send_cell::SendCell<T>::preserving_cell_thread<U>(&self, new: U) -> send_cells::send_cell::SendCell<U>
impl<T: core::default::Default> core::default::Default for send_cells::send_cell::SendCell<T>
pub fn send_cells::send_cell::SendCell<T>::default() -> send_cells::send_cell::SendCell<T>
impl<T: core::fmt::Debug> core::fmt::Debug for send_cells::send_cell::SendCell<T>
pub fn send_cells::send_cell::SendCell<T>::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl<T> core::convert::AsMut<T> for send_cells::send_cell::SendCell<T>
pub fn send_cells::send_cell::SendCell<T>::as_mut(&mut self) -> &mut T
impl<T> core::convert::AsRef<T> for send_cells::send_cell::SendCell<T>
pub fn send_cells::send_cell::SendCell<T>::as_ref(&self) -> &T
impl<T> core::convert::From<T> for send_cells::send_cell::SendCell<T>
pub fn send_cells::send_cell::SendCell<T>::from(value: T) -> Self
impl<T> core::ops::deref::Deref for send_cells::send_cell::SendCell<T>
pub type send_cells::send_cell::SendCell<T>::Target = T
pub fn send_cells::send_cell::SendCell<T>::deref(&self) -> &Self::Target
impl<T> core::ops::deref::DerefMut for send_cells::send_cell::SendCell<T>
pub fn send_cells::send_cell::SendCell<T>::deref_mut(&mut self) -> &mut Self::Target
impl<T> core::ops::drop::Drop for send_cells::send_cell::SendCell<T>
pub fn send_cells::send_cell::SendCell<T>::drop(&mut self)
impl<T> core::marker::Freeze for send_cells::send_cell::SendCell<T> where T: core::marker::Freeze
impl<T> core::marker::Send for send_cells::send_cell::SendCell<T>
impl<T> core::marker::Sync for send_cells::send_cell::SendCell<T> where T: core::marker::Sync
impl<T> core::marker::Unpin for send_cells::send_cell::SendCell<T> where T: core::marker::Unpin
impl<T> core::panic::unwind_safe::RefUnwindSafe for send_cells::send_cell::SendCell<T> where T: core::panic::unwind_safe::RefUnwindSafe
impl<T> core::panic::unwind_safe::UnwindSafe for send_cells::send_cell::SendCell<T> where T: core::panic::unwind_safe::UnwindSafe
impl<P, T> core::ops::deref::Receiver for send_cells::send_cell::SendCell<T> where P: core::ops::deref::Deref<Target = T> + ?core::marker::Sized, T: ?core::marker::Sized
pub type send_cells::send_cell::SendCell<T>::Target = T
impl<T, U> core::convert::Into<U> for send_cells::send_cell::SendCell<T> where U: core::convert::From<T>
pub fn send_cells::send_cell::SendCell<T>::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for send_cells::send_cell::SendCell<T> where U: core::convert::Into<T>
pub type send_cells::send_cell::SendCell<T>::Error = core::convert::Infallible
pub fn send_cells::send_cell::SendCell<T>::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for send_cells::send_cell::SendCell<T> where U: core::convert::TryFrom<T>
pub type send_cells::send_cell::SendCell<T>::Error = <U as core::convert::TryFrom<T>>::Error
pub fn send_cells::send_cell::SendCell<T>::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for send_cells::send_cell::SendCell<T> where T: 'static + ?core::marker::Sized
pub fn send_cells::send_cell::SendCell<T>::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for send_cells::send_cell::SendCell<T> where T: ?core::marker::Sized
pub fn send_cells::send_cell::SendCell<T>::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for send_cells::send_cell::SendCell<T> where T: ?core::marker::Sized
pub fn send_cells::send_cell::SendCell<T>::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for send_cells::send_cell::SendCell<T>
pub fn send_cells::send_cell::SendCell<T>::from(t: T) -> T
impl<T> core::convert::From<never> for send_cells::send_cell::SendCell<T>
pub fn send_cells::send_cell::SendCell<T>::from(t: never) -> T
pub struct send_cells::SendFuture<T>
impl<T: core::fmt::Debug> core::fmt::Debug for send_cells::send_cell::SendFuture<T>
pub fn send_cells::send_cell::SendFuture<T>::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl<T: core::future::future::Future> core::future::future::Future for send_cells::send_cell::SendFuture<T>
pub type send_cells::send_cell::SendFuture<T>::Output = <T as core::future::future::Future>::Output
pub fn send_cells::send_cell::SendFuture<T>::poll(self: core::pin::Pin<&mut Self>, cx: &mut core::task::wake::Context<'_>) -> core::task::poll::Poll<Self::Output>
impl<T> core::marker::Send for send_cells::send_cell::SendFuture<T>
impl<T> core::marker::Freeze for send_cells::send_cell::SendFuture<T> where T: core::marker::Freeze
impl<T> core::marker::Sync for send_cells::send_cell::SendFuture<T> where T: core::marker::Sync
impl<T> core::marker::Unpin for send_cells::send_cell::SendFuture<T> where T: core::marker::Unpin
impl<T> core::panic::unwind_safe::RefUnwindSafe for send_cells::send_cell::SendFuture<T> where T: core::panic::unwind_safe::RefUnwindSafe
impl<T> core::panic::unwind_safe::UnwindSafe for send_cells::send_cell::SendFuture<T> where T: core::panic::unwind_safe::UnwindSafe
impl<F> core::future::into_future::IntoFuture for send_cells::send_cell::SendFuture<T> where F: core::future::future::Future
pub type send_cells::send_cell::SendFuture<T>::IntoFuture = F
pub type send_cells::send_cell::SendFuture<T>::Output = <F as core::future::future::Future>::Output
pub fn send_cells::send_cell::SendFuture<T>::into_future(self) -> <F as core::future::into_future::IntoFuture>::IntoFuture
impl<T, U> core::convert::Into<U> for send_cells::send_cell::SendFuture<T> where U: core::convert::From<T>
pub fn send_cells::send_cell::SendFuture<T>::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for send_cells::send_cell::SendFuture<T> where U: core::convert::Into<T>
pub type send_cells::send_cell::SendFuture<T>::Error = core::convert::Infallible
pub fn send_cells::send_cell::SendFuture<T>::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for send_cells::send_cell::SendFuture<T> where U: core::convert::TryFrom<T>
pub type send_cells::send_cell::SendFuture<T>::Error = <U as core::convert::TryFrom<T>>::Error
pub fn send_cells::send_cell::SendFuture<T>::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for send_cells::send_cell::SendFuture<T> where T: 'static + ?core::marker::Sized
pub fn send_cells::send_cell::SendFuture<T>::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for send_cells::send_cell::SendFuture<T> where T: ?core::marker::Sized
pub fn send_cells::send_cell::SendFuture<T>::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for send_cells::send_cell::SendFuture<T> where T: ?core::marker::Sized
pub fn send_cells::send_cell::SendFuture<T>::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for send_cells::send_cell::SendFuture<T>
pub fn send_cells::send_cell::SendFuture<T>::from(t: T) -> T
pub struct send_cells::SyncCell<T>
impl<T> send_cells::sync_cell::SyncCell<T>
pub fn send_cells::sync_cell::SyncCell<T>::into_inner(self) -> T
pub fn send_cells::sync_cell::SyncCell<T>::new(value: T) -> send_cells::sync_cell::SyncCell<T>
pub fn send_cells::sync_cell::SyncCell<T>::with<R>(&self, f: impl core::ops::function::FnOnce(&T) -> R) -> R
pub fn send_cells::sync_cell::SyncCell<T>::with_mut<R>(&self, f: impl core::ops::function::FnOnce(&mut T) -> R) -> R
pub unsafe fn send_cells::sync_cell::SyncCell<T>::with_mut_unchecked(&self) -> &mut T
pub unsafe fn send_cells::sync_cell::SyncCell<T>::with_unchecked(&self) -> &T
impl<T: core::clone::Clone> core::clone::Clone for send_cells::sync_cell::SyncCell<T>
pub fn send_cells::sync_cell::SyncCell<T>::clone(&self) -> Self
impl<T: core::cmp::Eq> core::cmp::Eq for send_cells::sync_cell::SyncCell<T>
impl<T: core::cmp::Ord> core::cmp::Ord for send_cells::sync_cell::SyncCell<T>
pub fn send_cells::sync_cell::SyncCell<T>::cmp(&self, other: &Self) -> core::cmp::Ordering
impl<T: core::cmp::PartialEq> core::cmp::PartialEq for send_cells::sync_cell::SyncCell<T>
pub fn send_cells::sync_cell::SyncCell<T>::eq(&self, other: &Self) -> bool
impl<T: core::cmp::PartialOrd> core::cmp::PartialOrd for send_cells::sync_cell::SyncCell<T>
pub fn send_cells::sync_cell::SyncCell<T>::partial_cmp(&self, other: &Self) -> core::option::Option<core::cmp::Ordering>
impl<T: core::default::Default> core::default::Default for send_cells::sync_cell::SyncCell<T>
pub fn send_cells::sync_cell::SyncCell<T>::default() -> send_cells::sync_cell::SyncCell<T>
impl<T: core::fmt::Debug> core::fmt::Debug for send_cells::sync_cell::SyncCell<T>
pub fn send_cells::sync_cell::SyncCell<T>::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl<T: core::hash::Hash> core::hash::Hash for send_cells::sync_cell::SyncCell<T>
pub fn send_cells::sync_cell::SyncCell<T>::hash<H: core::hash::Hasher>(&self, state: &mut H)
impl<T: core::marker::Send> core::marker::Send for send_cells::sync_cell::SyncCell<T>
impl<T: core::marker::Send> core::marker::Sync for send_cells::sync_cell::SyncCell<T>
impl<T> core::convert::From<T> for send_cells::sync_cell::SyncCell<T>
pub fn send_cells::sync_cell::SyncCell<T>::from(value: T) -> Self
impl<T> !core::marker::Freeze for send_cells::sync_cell::SyncCell<T>
impl<T> core::marker::Unpin for send_cells::sync_cell::SyncCell<T> where T: core::marker::Unpin
impl<T> !core::panic::unwind_safe::RefUnwindSafe for send_cells::sync_cell::SyncCell<T>
impl<T> core::panic::unwind_safe::UnwindSafe for send_cells::sync_cell::SyncCell<T> where T: core::panic::unwind_safe::UnwindSafe
impl<T, U> core::convert::Into<U> for send_cells::sync_cell::SyncCell<T> where U: core::convert::From<T>
pub fn send_cells::sync_cell::SyncCell<T>::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for send_cells::sync_cell::SyncCell<T> where U: core::convert::Into<T>
pub type send_cells::sync_cell::SyncCell<T>::Error = core::convert::Infallible
pub fn send_cells::sync_cell::SyncCell<T>::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for send_cells::sync_cell::SyncCell<T> where U: core::convert::TryFrom<T>
pub type send_cells::sync_cell::SyncCell<T>::Error = <U as core::convert::TryFrom<T>>::Error
pub fn send_cells::sync_cell::SyncCell<T>::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for send_cells::sync_cell::SyncCell<T> where T: core::clone::Clone
pub type send_cells::sync_cell::SyncCell<T>::Owned = T
pub fn send_cells::sync_cell::SyncCell<T>::clone_into(&self, target: &mut T)
pub fn send_cells::sync_cell::SyncCell<T>::to_owned(&self) -> T
impl<T> core::any::Any for send_cells::sync_cell::SyncCell<T> where T: 'static + ?core::marker::Sized
pub fn send_cells::sync_cell::SyncCell<T>::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for send_cells::sync_cell::SyncCell<T> where T: ?core::marker::Sized
pub fn send_cells::sync_cell::SyncCell<T>::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for send_cells::sync_cell::SyncCell<T> where T: ?core::marker::Sized
pub fn send_cells::sync_cell::SyncCell<T>::borrow_mut(&mut self) -> &mut T
impl<T> core::clone::CloneToUninit for send_cells::sync_cell::SyncCell<T> where T: core::clone::Clone
pub unsafe fn send_cells::sync_cell::SyncCell<T>::clone_to_uninit(&self, dest: *mut u8)
impl<T> core::convert::From<T> for send_cells::sync_cell::SyncCell<T>
pub fn send_cells::sync_cell::SyncCell<T>::from(t: T) -> T
impl<T> core::convert::From<never> for send_cells::sync_cell::SyncCell<T>
pub fn send_cells::sync_cell::SyncCell<T>::from(t: never) -> T
pub struct send_cells::UnsafeSendCell<T>(_)
impl<T: core::future::future::Future> send_cells::unsafe_send_cell::UnsafeSendCell<T>
pub unsafe fn send_cells::unsafe_send_cell::UnsafeSendCell<T>::into_future(self) -> send_cells::unsafe_send_cell::UnsafeSendFuture<T>
impl<T> send_cells::unsafe_send_cell::UnsafeSendCell<T>
pub unsafe fn send_cells::unsafe_send_cell::UnsafeSendCell<T>::get(&self) -> &T
pub unsafe fn send_cells::unsafe_send_cell::UnsafeSendCell<T>::get_mut(&mut self) -> &mut T
pub unsafe fn send_cells::unsafe_send_cell::UnsafeSendCell<T>::into_inner(self) -> T
pub fn send_cells::unsafe_send_cell::UnsafeSendCell<T>::new(value: T) -> Self
pub unsafe fn send_cells::unsafe_send_cell::UnsafeSendCell<T>::new_unchecked(value: T) -> Self
impl<T: core::default::Default> core::default::Default for send_cells::unsafe_send_cell::UnsafeSendCell<T>
pub fn send_cells::unsafe_send_cell::UnsafeSendCell<T>::default() -> Self
impl<T> core::convert::From<T> for send_cells::unsafe_send_cell::UnsafeSendCell<T>
pub fn send_cells::unsafe_send_cell::UnsafeSendCell<T>::from(value: T) -> Self
impl<T> core::fmt::Debug for send_cells::unsafe_send_cell::UnsafeSendCell<T>
pub fn send_cells::unsafe_send_cell::UnsafeSendCell<T>::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl<T> core::marker::Send for send_cells::unsafe_send_cell::UnsafeSendCell<T>
impl<T> core::marker::Freeze for send_cells::unsafe_send_cell::UnsafeSendCell<T> where T: core::marker::Freeze
impl<T> core::marker::Sync for send_cells::unsafe_send_cell::UnsafeSendCell<T> where T: core::marker::Sync
impl<T> core::marker::Unpin for send_cells::unsafe_send_cell::UnsafeSendCell<T> where T: core::marker::Unpin
impl<T> core::panic::unwind_safe::RefUnwindSafe for send_cells::unsafe_send_cell::UnsafeSendCell<T> where T: core::panic::unwind_safe::RefUnwindSafe
impl<T> core::panic::unwind_safe::UnwindSafe for send_cells::unsafe_send_cell::UnsafeSendCell<T> where T: core::panic::unwind_safe::UnwindSafe
impl<T, U> core::convert::Into<U> for send_cells::unsafe_send_cell::UnsafeSendCell<T> where U: core::convert::From<T>
pub fn send_cells::unsafe_send_cell::UnsafeSendCell<T>::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for send_cells::unsafe_send_cell::UnsafeSendCell<T> where U: core::convert::Into<T>
pub type send_cells::unsafe_send_cell::UnsafeSendCell<T>::Error = core::convert::Infallible
pub fn send_cells::unsafe_send_cell::UnsafeSendCell<T>::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for send_cells::unsafe_send_cell::UnsafeSendCell<T> where U: core::convert::TryFrom<T>
pub type send_cells::unsafe_send_cell::UnsafeSendCell<T>::Error = <U as core::convert::TryFrom<T>>::Error
pub fn send_cells::unsafe_send_cell::UnsafeSendCell<T>::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for send_cells::unsafe_send_cell::UnsafeSendCell<T> where T: 'static + ?core::marker::Sized
pub fn send_cells::unsafe_send_cell::UnsafeSendCell<T>::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for send_cells::unsafe_send_cell::UnsafeSendCell<T> where T: ?core::marker::Sized
pub fn send_cells::unsafe_send_cell::UnsafeSendCell<T>::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for send_cells::unsafe_send_cell::UnsafeSendCell<T> where T: ?core::marker::Sized
pub fn send_cells::unsafe_send_cell::UnsafeSendCell<T>::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for send_cells::unsafe_send_cell::UnsafeSendCell<T>
pub fn send_cells::unsafe_send_cell::UnsafeSendCell<T>::from(t: T) -> T
impl<T> core::convert::From<never> for send_cells::unsafe_send_cell::UnsafeSendCell<T>
pub fn send_cells::unsafe_send_cell::UnsafeSendCell<T>::from(t: never) -> T
pub struct send_cells::UnsafeSendFuture<T>(_)
impl<T: core::fmt::Debug> core::fmt::Debug for send_cells::unsafe_send_cell::UnsafeSendFuture<T>
pub fn send_cells::unsafe_send_cell::UnsafeSendFuture<T>::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl<T: core::future::future::Future> core::future::future::Future for send_cells::unsafe_send_cell::UnsafeSendFuture<T>
pub type send_cells::unsafe_send_cell::UnsafeSendFuture<T>::Output = <T as core::future::future::Future>::Output
pub fn send_cells::unsafe_send_cell::UnsafeSendFuture<T>::poll(self: core::pin::Pin<&mut Self>, cx: &mut core::task::wake::Context<'_>) -> core::task::poll::Poll<Self::Output>
impl<T> core::marker::Send for send_cells::unsafe_send_cell::UnsafeSendFuture<T>
impl<T> core::marker::Freeze for send_cells::unsafe_send_cell::UnsafeSendFuture<T> where T: core::marker::Freeze
impl<T> core::marker::Sync for send_cells::unsafe_send_cell::UnsafeSendFuture<T> where T: core::marker::Sync
impl<T> core::marker::Unpin for send_cells::unsafe_send_cell::UnsafeSendFuture<T> where T: core::marker::Unpin
impl<T> core::panic::unwind_safe::RefUnwindSafe for send_cells::unsafe_send_cell::UnsafeSendFuture<T> where T: core::panic::unwind_safe::RefUnwindSafe
impl<T> core::panic::unwind_safe::UnwindSafe for send_cells::unsafe_send_cell::UnsafeSendFuture<T> where T: core::panic::unwind_safe::UnwindSafe
impl<F> core::future::into_future::IntoFuture for send_cells::unsafe_send_cell::UnsafeSendFuture<T> where F: core::future::future::Future
pub type send_cells::unsafe_send_cell::UnsafeSendFuture<T>::IntoFuture = F
pub type send_cells::unsafe_send_cell::UnsafeSendFuture<T>::Output = <F as core::future::future::Future>::Output
pub fn send_cells::unsafe_send_cell::UnsafeSendFuture<T>::into_future(self) -> <F as core::future::into_future::IntoFuture>::IntoFuture
impl<T, U> core::convert::Into<U> for send_cells::unsafe_send_cell::UnsafeSendFuture<T> where U: core::convert::From<T>
pub fn send_cells::unsafe_send_cell::UnsafeSendFuture<T>::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for send_cells::unsafe_send_cell::UnsafeSendFuture<T> where U: core::convert::Into<T>
pub type send_cells::unsafe_send_cell::UnsafeSendFuture<T>::Error = core::convert::Infallible
pub fn send_cells::unsafe_send_cell::UnsafeSendFuture<T>::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for send_cells::unsafe_send_cell::UnsafeSendFuture<T> where U: core::convert::TryFrom<T>
pub type send_cells::unsafe_send_cell::UnsafeSendFuture<T>::Error = <U as core::convert::TryFrom<T>>::Error
pub fn send_cells::unsafe_send_cell::UnsafeSendFuture<T>::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for send_cells::unsafe_send_cell::UnsafeSendFuture<T> where T: 'static + ?core::marker::Sized
pub fn send_cells::unsafe_send_cell::UnsafeSendFuture<T>::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for send_cells::unsafe_send_cell::UnsafeSendFuture<T> where T: ?core::marker::Sized
pub fn send_cells::unsafe_send_cell::UnsafeSendFuture<T>::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for send_cells::unsafe_send_cell::UnsafeSendFuture<T> where T: ?core::marker::Sized
pub fn send_cells::unsafe_send_cell::UnsafeSendFuture<T>::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for send_cells::unsafe_send_cell::UnsafeSendFuture<T>
pub fn send_cells::unsafe_send_cell::UnsafeSendFuture<T>::from(t: T) -> T
